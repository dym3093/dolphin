
1. ReentrantLock 可重入锁
eg: ReentrantLock 的应用

public class MyResource(){
    private ReentrantLock lock = new ReentrantLock();
    public void show(){
        try {
            lock.lock();
            // other code
            ...
        } finally {
           lock.unlock();
        }
    }
}

2. Object / Condition 中的线程通信方法等价

    Object                      Condition

    wait()                      await()
    wait(long timeOut)          await(long time, TimeUnit unit)
    notify()                    signal()
    notifyAll()                 signalAll()

3. 公平锁 / 非公平锁

公平锁： 线程获取锁的顺序是按照线程枷锁的顺序来分配，先来先得的FIFO先进先出顺序
非公平锁： 一种获取锁的抢占机制，是随即获取锁的，和公平锁不一样的是先来不一定先得到锁，
这种方式可能造成某些线程一直得不到锁，结果也就是不公平的了。
非公平锁的情况下，先start()的线程不一定先获得锁

4. ReentrantReadWriteLock
    ReentrantLock 具有完全排他性的效果，即同一个时间内只有一个线程在执行 ReentrantLock.lock()
方法后面的任务;这样虽然可以保证共享数据的线程安全性，但是效率非常低下。所以 JDK 中提供了一种读写锁
ReentrantReadWriteLock 类，使它可以加快运行效率，在某些不需要操作实例变量的方法中，完全可以使用
ReentrantReadWriteLock 来提升该方法的代码执行效率。
    读写锁表示也有两个锁，一个是读操作相关的锁，也称为共享锁;另一个是写操作相关的锁，也叫排他锁。
多个读锁之间不互斥;读锁和写锁互斥;写锁和写锁互斥。 多个线程可以同时进行读取操作，但是同一时刻只
允许一个Thread进行写操作。
















