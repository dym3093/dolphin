装饰模式:Decorator 常被翻译成"装饰",我觉得翻译成"油漆工"更形象点,油漆工
(decorator)是用来刷油漆的,那么被刷油漆的对象我们称 decoratee.这两种实体在
Decorator 模式中是必须的.
Decorator 定义:
动态给一个对象添加一些额外的职责,就象在墙上刷油漆.使用 Decorator 模式相比用生
成子类方式达到功能的扩充显得更为灵活.
为什么使用 Decorator?
我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁多,那么势
必生成很多子类,增加系统的复杂性,同时,使用继承实现功能拓展,我们必须可预见这些拓
展功能,这些功能是编译时就确定了,是静态的.
使用 Decorator 的理由是:这些功能需要由用户动态决定加入的方式和时机.Decorator
提供了"即插即用"的方法,在运行期间决定何时增加何种功能.
如何使用?
举 Adapter 中的打桩示例,在 Adapter 中有两种类:方形桩 圆形桩,Adapter 模式展示
如何综合使用这两个类,在 Decorator 模式中,我们是要在打桩时增加一些额外功能,比如,
挖坑 在桩上钉木板等,不关心如何使用两个不相关的类.